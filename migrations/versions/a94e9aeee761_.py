"""empty message

Revision ID: a94e9aeee761
Revises: 
Create Date: 2018-10-03 13:45:18.447827

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'a94e9aeee761'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('annotation', 'article_id',
               existing_type=sa.BIGINT(),
               nullable=False)
    op.alter_column('annotation', 'author_id',
               existing_type=sa.BIGINT(),
               nullable=False)
    op.alter_column('annotation', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False)
    op.alter_column('annotation', 'span_finish',
               existing_type=sa.BIGINT(),
               nullable=False)
    op.alter_column('annotation', 'span_start',
               existing_type=sa.BIGINT(),
               nullable=False)
    op.alter_column('annotation', 'tag',
               existing_type=sa.BIGINT(),
               nullable=False)
    op.alter_column('annotation', 'type',
               existing_type=sa.BIGINT(),
               nullable=False)
    op.alter_column('annotation', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False)
    op.create_unique_constraint(None, 'annotation', ['article_id', 'author_id', 'span_start', 'span_finish', 'type', 'tag'])
    op.create_foreign_key(None, 'annotation', 'article', ['article_id'], ['id'])
    op.create_foreign_key(None, 'annotation', 'user', ['author_id'], ['id'])
    op.alter_column('article', 'author_id',
               existing_type=sa.BIGINT(),
               nullable=False)
    op.alter_column('article', 'content',
               existing_type=sa.TEXT(),
               nullable=False)
    op.alter_column('article', 'corpus_id',
               existing_type=sa.BIGINT(),
               nullable=False)
    op.alter_column('article', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False)
    op.alter_column('article', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False)
    op.create_foreign_key(None, 'article', 'corpus', ['corpus_id'], ['id'])
    op.create_foreign_key(None, 'article', 'user', ['author_id'], ['id'])
    op.alter_column('corpus', 'author_id',
               existing_type=sa.BIGINT(),
               nullable=False)
    op.alter_column('corpus', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False)
    op.alter_column('corpus', 'description',
               existing_type=sa.TEXT(),
               nullable=False)
    op.alter_column('corpus', 'title',
               existing_type=sa.TEXT(),
               nullable=False)
    op.alter_column('corpus', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False)
    op.create_foreign_key(None, 'corpus', 'user', ['author_id'], ['id'])
    op.alter_column('token_blacklist', 'expires',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False)
    op.alter_column('token_blacklist', 'jti',
               existing_type=sa.TEXT(),
               nullable=False)
    op.alter_column('token_blacklist', 'revoked',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('token_blacklist', 'token_type',
               existing_type=sa.TEXT(),
               nullable=False)
    op.alter_column('token_blacklist', 'user_id',
               existing_type=sa.BIGINT(),
               nullable=False)
    op.create_unique_constraint(None, 'token_blacklist', ['jti'])
    op.create_foreign_key(None, 'token_blacklist', 'user', ['user_id'], ['id'])
    op.alter_column('user', 'email',
               existing_type=sa.TEXT(),
               nullable=False)
    op.alter_column('user', 'password',
               existing_type=sa.TEXT(),
               nullable=False)
    op.alter_column('user', 'username',
               existing_type=sa.TEXT(),
               nullable=False)
    op.create_unique_constraint(None, 'user', ['email'])
    op.create_unique_constraint(None, 'user', ['username'])
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'user', type_='unique')
    op.drop_constraint(None, 'user', type_='unique')
    op.alter_column('user', 'username',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('user', 'password',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('user', 'email',
               existing_type=sa.TEXT(),
               nullable=True)
    op.drop_constraint(None, 'token_blacklist', type_='foreignkey')
    op.drop_constraint(None, 'token_blacklist', type_='unique')
    op.alter_column('token_blacklist', 'user_id',
               existing_type=sa.BIGINT(),
               nullable=True)
    op.alter_column('token_blacklist', 'token_type',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('token_blacklist', 'revoked',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('token_blacklist', 'jti',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('token_blacklist', 'expires',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True)
    op.drop_constraint(None, 'corpus', type_='foreignkey')
    op.alter_column('corpus', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True)
    op.alter_column('corpus', 'title',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('corpus', 'description',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('corpus', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True)
    op.alter_column('corpus', 'author_id',
               existing_type=sa.BIGINT(),
               nullable=True)
    op.drop_constraint(None, 'article', type_='foreignkey')
    op.drop_constraint(None, 'article', type_='foreignkey')
    op.alter_column('article', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True)
    op.alter_column('article', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True)
    op.alter_column('article', 'corpus_id',
               existing_type=sa.BIGINT(),
               nullable=True)
    op.alter_column('article', 'content',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('article', 'author_id',
               existing_type=sa.BIGINT(),
               nullable=True)
    op.drop_constraint(None, 'annotation', type_='foreignkey')
    op.drop_constraint(None, 'annotation', type_='foreignkey')
    op.drop_constraint(None, 'annotation', type_='unique')
    op.alter_column('annotation', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True)
    op.alter_column('annotation', 'type',
               existing_type=sa.BIGINT(),
               nullable=True)
    op.alter_column('annotation', 'tag',
               existing_type=sa.BIGINT(),
               nullable=True)
    op.alter_column('annotation', 'span_start',
               existing_type=sa.BIGINT(),
               nullable=True)
    op.alter_column('annotation', 'span_finish',
               existing_type=sa.BIGINT(),
               nullable=True)
    op.alter_column('annotation', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True)
    op.alter_column('annotation', 'author_id',
               existing_type=sa.BIGINT(),
               nullable=True)
    op.alter_column('annotation', 'article_id',
               existing_type=sa.BIGINT(),
               nullable=True)
    # ### end Alembic commands ###
